name: Ai Service CD

on:
  push:
    branches: [ "main", "staging" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up environment
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        cat .env # Verify that secrets are set

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker-compose -f docker-compose-deployment.yml build

        # Push ai-service container to ecr
        docker tag ay2324s1-course-assessment-g58_ai:$IMAGE_TAG $ECR_REGISTRY/ay2324s1-course-assessment-g58-ai:$IMAGE_TAG
        docker push $ECR_REGISTRY/ay2324s1-course-assessment-g58-ai:$IMAGE_TAG
        echo "push image=ai" >> $GITHUB_OUTPUT

    - name: Download ai-service task definition
      run: |
        aws ecs describe-task-definition --task-definition peerprep-ai-service --query taskDefinition > ai-task-definition.json
    
    - name: Deploy Amazon ECS ai-service task
      uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      with:
        task-definition: ai-task-definition.json
        service: ai
        cluster: peerprep_t
        wait-for-service-stability: true
